const { ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, EmbedBuilder } = require('discord.js');

module.exports = {
  sendMessage: async (client) => {
    try {
      const channel = client.channels.cache.get('1335274571259052153');
      if (!channel) throw new Error('Salon de cartes non trouv√©');

      const button = new ButtonBuilder()
        .setCustomId('open_identity_form')
        .setLabel('üìù Cr√©er mon ID')
        .setStyle(ButtonStyle.Success)
        .setEmoji('ü™™');

      const row = new ActionRowBuilder().addComponents(button);

      const embed = new EmbedBuilder()
        .setColor('#4CAF50')
        .setTitle('üéâ Cr√©ation de Carte d\'Identit√© Virtuelle üéâ')
        .setDescription('Bienvenue dans le processus de cr√©ation de votre carte d\'identit√© virtuelle !')
        .addFields(
          { name: 'üìã Comment √ßa marche ?', value: 'Cliquez sur le bouton ci-dessous pour commencer. Vous serez guid√© √† travers un formulaire simple et rapide.' },
          { name: 'üîí S√©curit√©', value: 'Vos informations sont trait√©es de mani√®re confidentielle et s√©curis√©e.' },
          { name: 'üì∏ Photo', value: 'N\'oubliez pas de pr√©parer une photo pour votre carte d\'identit√© !' }
        )
        .setFooter({ text: 'Cr√©ez votre identit√© virtuelle d√®s maintenant !', iconURL: 'https://i.imgur.com/4ZvJ9Nl.png' })
        .setTimestamp();

      await channel.send({
        embeds: [embed],
        components: [row]
      });
    } catch (error) {
      console.error('Erreur lors de l\'envoi du message de carte d\'identit√©:', error);
    }
  },

  handleButton: async (interaction) => {
    const modal = new ModalBuilder()
      .setCustomId('identity_form')
      .setTitle('Formulaire de Carte d\'Identit√©');

    const nomInput = new TextInputBuilder()
      .setCustomId('nom')
      .setLabel('Quel est votre nom ?')
      .setStyle(TextInputStyle.Short);

    const prenomInput = new TextInputBuilder()
      .setCustomId('prenom')
      .setLabel('Quel est votre pr√©nom ?')
      .setStyle(TextInputStyle.Short);

    const ageInput = new TextInputBuilder()
      .setCustomId('age')
      .setLabel('Quel est votre √¢ge ?')
      .setStyle(TextInputStyle.Short);

    const nationaliteInput = new TextInputBuilder()
      .setCustomId('nationalite')
      .setLabel('Quelle est votre nationalit√© ?')
      .setStyle(TextInputStyle.Short);

    modal.addComponents(
      new ActionRowBuilder().addComponents(nomInput),
      new ActionRowBuilder().addComponents(prenomInput),
      new ActionRowBuilder().addComponents(ageInput),
      new ActionRowBuilder().addComponents(nationaliteInput)
    );

    await interaction.showModal(modal);
  },

  handleModal: async (interaction) => {
    const nom = interaction.fields.getTextInputValue('nom');
    const prenom = interaction.fields.getTextInputValue('prenom');
    const age = interaction.fields.getTextInputValue('age');
    const nationalite = interaction.fields.getTextInputValue('nationalite');

    await interaction.reply({
      content: "Formulaire re√ßu ! Veuillez maintenant envoyer une photo pour votre carte d'identit√© (vous avez 60 secondes).",
      ephemeral: true
    });

    const filter = m => m.author.id === interaction.user.id && m.attachments.size > 0;
    try {
      const collected = await interaction.channel.awaitMessages({ filter, max: 1, time: 60000, errors: ['time'] });
      const photoMessage = collected.first();
      const attachment = photoMessage.attachments.first();

      const embed = new EmbedBuilder()
        .setColor('#0099FF')
        .setTitle(`üìá CARTE D'IDENTIT√â VIRTUELLE - ${prenom.toUpperCase()}`)
        .setAuthor({ 
          name: `${interaction.user.tag}`, 
          iconURL: interaction.user.displayAvatarURL() 
        })
        .setThumbnail(attachment.url)
        .addFields(
          { 
            name: 'üîñ Identit√© compl√®te', 
            value: `**Nom :** ${nom}\n**Pr√©nom :** ${prenom}\n**√Çge :** ${age} ans`,
            inline: false 
          },
          { 
            name: 'üåç Nationalit√©', 
            value: `üè≥Ô∏è ${nationalite}`,
            inline: true 
          },
          { 
            name: 'üìÖ Date de cr√©ation', 
            value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
            inline: true 
          }
        )
        .setFooter({ 
          text: 'Carte s√©curis√©e - Validit√© permanente', 
          iconURL: 'https://i.imgur.com/4ZvJ9Nl.png' 
        });

      await interaction.followUp({ 
        content: "Voici votre carte d'identit√© virtuelle :",
        embeds: [embed], 
        ephemeral: true 
      });

      try {
        await interaction.user.send({
          content: "Voici votre carte d'identit√© virtuelle :",
          embeds: [embed]
        });
      } catch (error) {
        console.error("Erreur lors de l'envoi du MP :", error);
        await interaction.followUp({
          content: "Impossible de vous envoyer votre carte d'identit√© en message priv√©. V√©rifiez que vous acceptez les messages priv√©s du serveur.",
          ephemeral: true
        });
      }

      const recensementChannel = interaction.client.channels.cache.get('1335230189139005503');
      if (recensementChannel) {
        await recensementChannel.send({ 
          content: `Nouvelle carte d'identit√© cr√©√©e par ${interaction.user.tag}`,
          embeds: [embed] 
        });
      } else {
        console.error("Le salon de recensement n'a pas √©t√© trouv√©.");
      }

      // Suppression de la photo
      if (photoMessage.deletable) {
        await photoMessage.delete();
      }

    } catch (error) {
      console.error('Erreur lors de la cr√©ation de la carte d\'identit√©:', error);
      const embedSansPhoto = new EmbedBuilder()
        .setColor('#0099FF')
        .setTitle(`üìá CARTE D'IDENTIT√â VIRTUELLE - ${prenom.toUpperCase()}`)
        .setAuthor({ 
          name: `${interaction.user.tag}`, 
          iconURL: interaction.user.displayAvatarURL() 
        })
        .addFields(
          { 
            name: 'üîñ Identit√© compl√®te', 
            value: `**Nom :** ${nom}\n**Pr√©nom :** ${prenom}\n**√Çge :** ${age} ans`,
            inline: false 
          },
          { 
            name: 'üåç Nationalit√©', 
            value: `üè≥Ô∏è ${nationalite}`,
            inline: true 
          },
          { 
            name: 'üìÖ Date de cr√©ation', 
            value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
            inline: true 
          }
        )
        .setFooter({ 
          text: 'Carte s√©curis√©e - Validit√© permanente', 
          iconURL: 'https://i.imgur.com/4ZvJ9Nl.png' 
        });

      await interaction.followUp({
        content: "Vous n'avez pas envoy√© de photo dans le temps imparti. Voici votre carte d'identit√© sans photo :",
        embeds: [embedSansPhoto],
        ephemeral: true
      });

      try {
        await interaction.user.send({
          content: "Voici votre carte d'identit√© virtuelle (sans photo) :",
          embeds: [embedSansPhoto]
        });
      } catch (error) {
        console.error("Erreur lors de l'envoi du MP :", error);
        await interaction.followUp({
          content: "Impossible de vous envoyer votre carte d'identit√© en message priv√©. V√©rifiez que vous acceptez les messages priv√©s du serveur.",
          ephemeral: true
        });
      }

      const recensementChannel = interaction.client.channels.cache.get('1335230189139005503');
      if (recensementChannel) {
        await recensementChannel.send({ 
          content: `Nouvelle carte d'identit√© cr√©√©e par ${interaction.user.tag} (sans photo)`,
          embeds: [embedSansPhoto] 
        });
      } else {
        console.error("Le salon de recensement n'a pas √©t√© trouv√©.");
      }
    }
  },
};
