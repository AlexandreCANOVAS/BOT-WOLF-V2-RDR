const { ActionRowBuilder, ButtonBuilder, EmbedBuilder, PermissionsBitField, ChannelType, ButtonStyle } = require('discord.js');

const DEMANDE_SALON_ID = '1326606785561231380';
const CATEGORY_ID = '1326606585165778974'; // ID de la cat√©gorie "üåê | MEDIATEUR"
const STAFF_ROLE_ID = '1059787646051819540';

const createEmbed = (title, description) => {
  return new EmbedBuilder()
    .setColor('#6b3d22')
    .setTitle(title)
    .setDescription(description)
    .setFooter({ text: 'Red Dead Redemption 2 - M√©diateur Assistance' });
};

module.exports = {
  sendTicketMessage: async (client) => {
    try {
      const demandeSalon = await client.channels.fetch(DEMANDE_SALON_ID);
      if (!demandeSalon) {
        throw new Error('Le salon "„Äéüõé„Äèùòãùò¶ùòÆùò¢ùòØùò•ùò¶ùò¥" n\'a pas √©t√© trouv√©.');
      }

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId('create_mediateur_ticket')
          .setLabel('üì© Demander un m√©diateur')
          .setStyle(ButtonStyle.Primary)
      );

      const embed = createEmbed('üåµ BESOIN D\'UN M√âDIATEUR? üåµ', 
        `Vous √™tes sur le point de demander l'assistance d'un m√©diateur.
        Un membre du staff viendra vous aider rapidement pour r√©soudre votre probl√®me.
        
        üìú Pour ouvrir un ticket de m√©diation, appuyez sur le bouton ci-dessous. Vous pourrez discuter directement avec un m√©diateur.`
      );

      await demandeSalon.send({ embeds: [embed], components: [row] });
    } catch (error) {
      console.error('Erreur lors de l\'envoi du message du ticket de m√©diation :', error);
    }
  },

  createTicket: async (interaction) => {
    const member = interaction.user;
  
    try {
      const category = await interaction.guild.channels.fetch(CATEGORY_ID);
      if (!category) {
        throw new Error("La cat√©gorie 'üåê | MEDIATEUR' n'a pas √©t√© trouv√©e.");
      }
  
      const ticketChannel = await interaction.guild.channels.create({
        name: `mediation-${member.username}`,
        type: ChannelType.GuildText,
        parent: category.id,
        permissionOverwrites: [
          {
            id: member.id,
            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
          },
          {
            id: STAFF_ROLE_ID,
            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
          },
          {
            id: interaction.guild.id,
            deny: [PermissionsBitField.Flags.ViewChannel],
          },
        ],
      });
  
      const closeTicketRow = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId('close_mediateur_ticket')
          .setLabel('üö™ Fermer le ticket')
          .setStyle(ButtonStyle.Danger)
      );
  
      const ticketEmbed = createEmbed('üö® Votre ticket de m√©diation a √©t√© ouvert ! üö®',
        `Bienvenue dans votre *ticket de m√©diation*. Un m√©diateur arrivera pour vous aider d√®s que possible. 
        üìÖ En attendant, veuillez rester calme et expliquer votre situation.
        
        - D√©crivez le probl√®me que vous rencontrez.
        - Un m√©diateur vous contactera sous peu pour vous assister.`
      );
  
      await ticketChannel.send({
        content: `<@${member.id}> a ouvert un ticket de m√©diation. Un m√©diateur le rejoindra sous peu.`,
        embeds: [ticketEmbed],
        components: [closeTicketRow],
      });
  
      if (interaction.isRepliable()) {
        await interaction.reply({
          content: `Votre ticket de m√©diation a √©t√© cr√©√© avec succ√®s dans la cat√©gorie 'üåê | MEDIATEUR'. Un m√©diateur vous r√©pondra sous peu.`,
          ephemeral: true
        });
      }
    } catch (error) {
      console.error('Erreur lors de l\'ouverture du ticket de m√©diation :', error);
      if (interaction.isRepliable()) {
        await interaction.reply({
          content: "Une erreur est survenue lors de la cr√©ation de votre ticket de m√©diation.",
          ephemeral: true
        });
      }
    }
  },
  

  closeTicket: async (interaction) => {
    if (!interaction.member.roles.cache.has(STAFF_ROLE_ID)) {
      if (interaction.isRepliable()) {
        return interaction.reply({
          content: "D√©sol√©, vous n'avez pas la permission de fermer ce ticket de m√©diation.",
          ephemeral: true
        });
      }
      return;
    }

    try {
      const ticketChannel = interaction.channel;
      await ticketChannel.send({
        content: 'Le ticket de m√©diation a √©t√© ferm√©. Merci pour votre coop√©ration.',
      });
      

      if (interaction.isRepliable()) {
        await interaction.reply({
          content: 'Le ticket de m√©diation a √©t√© ferm√© avec succ√®s.',
          ephemeral: true
        });
        await ticketChannel.delete();
      }
    } catch (error) {
      console.error('Erreur lors de la fermeture du ticket de m√©diation :', error);
      if (interaction.isRepliable()) {
        await interaction.reply({
          content: "Une erreur est survenue lors de la fermeture du ticket de m√©diation.",
          ephemeral: true
        });
      }
    }
  }
};
